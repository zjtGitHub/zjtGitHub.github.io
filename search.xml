<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多个echart图表添加resize事件</title>
      <link href="/2021/08/19/duo-ge-echart-tu-biao-tian-jia-resize-shi-jian/"/>
      <url>/2021/08/19/duo-ge-echart-tu-biao-tian-jia-resize-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>由于我的图表都是循环渲染出来的，一开始是在每个循环当中添加的 resize 事件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> chartDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'chart'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'chartDom'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>chartDom<span class="token punctuation">)</span><span class="token keyword">const</span> myChart <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'chartDom'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">...</span><span class="token operator">...</span>图表渲染window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   myChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>后来发现这样没有办法在 beforedestory 中清除 window 上的 resize 方法，因为要想使用 reomveEventListener 的话是不能使用匿名函数的，必须像类似这样的写法</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartResize<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartResize<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样的话还不能向这个函数中传入参数，于是我改为在循环外添加 resize 方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> mapGetChartData <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getChartData</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartResize<span class="token punctuation">)</span><span class="token punctuation">}</span>chartResize <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>chartdomList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      item<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>beforeDestroy <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartResize<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这样就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux路径正则表达式匹配</title>
      <link href="/2021/06/15/linux-lu-jing-zheng-ze-biao-da-shi-pi-pei/"/>
      <url>/2021/06/15/linux-lu-jing-zheng-ze-biao-da-shi-pi-pei/</url>
      
        <content type="html"><![CDATA[<p>开发时遇到表单需要校验linux文件路径，要求是开头必须是/，中间不能有空格和特殊符号，结尾可以是文件或是文件夹<br><strong>正确格式</strong></p><pre><code>//文件夹/文件夹//文件夹/process.yml</code></pre><p><strong>错误格式</strong></p><pre><code>opt/opt///opt/asd?</code></pre><p><strong>表达式</strong></p><pre><code>/(^\/)([^\\:*&lt;&gt;|&quot;?\r\n\s/]+\/)*([^\\:*&lt;&gt;|&quot;?\r\n\s/]+)?$/</code></pre><p>其中<code>(^\/)</code>表示开头的<code>/</code>&gt;</p><p><code>([^\\:*&lt;&gt;|&quot;?\r\n/.]+\/)*</code>中的<code>^\\:*&lt;&gt;|&quot;?\r\n/.</code>表示除了这些特殊字符以外的字符，而且不能为空名，所以后面要有个<code>+</code>，<code>*</code>表示<code>文件夹/</code>可以有零个或多个</p><p>路径最后一部分可以是文件夹或文件名，表达式和前面一样<code>?</code>表示零个或一个。</p><p>最后附上一个正则校验网址<a href="https://regexr.com/" target="_blank" rel="noopener">网址</a>，里面的表达式都是可视化的，看起来很清楚。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins没有执行docker权限问题</title>
      <link href="/2021/05/08/jenkins-mei-you-zhi-xing-docker-quan-xian-wen-ti/"/>
      <url>/2021/05/08/jenkins-mei-you-zhi-xing-docker-quan-xian-wen-ti/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create?name=web_test: dial unix /var/run/docker.sock: connect: permission denied.</code></pre><p><img src="/.io//1.png" alt="微信截图_20210508140329.png"><br>今天在使用jenkins构建项目时出现了这个报错</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><code>jenkins</code> 没有 <code>docker</code> 的执行权限</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用 <code>cat /etc/group</code> 命令发现 <code>docker</code> 的用户组id是992，而 <code>docker-compose.yml</code> 文件中</p><pre class=" language-shell"><code class="language-shell">services:  jenkins:    container_name: 'jenkins'    image: jenkins/jenkins:lts    restart: always    user: jenkins:994</code></pre><p>是这样写的，所以jenkins和docker不在一个用户组中，修改994为992，之后重启jenkins镜像即可。</p><pre class=" language-shell"><code class="language-shell">docker-compose stopdocker-compose up -d --build</code></pre>]]></content>
      
      
      <categories>
          
          <category> 踩坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除git中的敏感提交记录</title>
      <link href="/2020/12/18/shan-chu-git-zhong-de-min-gan-ti-jiao-ji-lu/"/>
      <url>/2020/12/18/shan-chu-git-zhong-de-min-gan-ti-jiao-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>有时提交 git 时会不小心把数据库密码这样一些敏感内容也给提交上去，这是很危险的，及时删除了文件，在提交记录中也会找到这些敏感内容，所以我们就需要在提交记录中彻底删除和这个文件相关的内容</p><p>github 官网有这样一篇<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/removing-sensitive-data-from-a-repository" target="_blank" rel="noopener">文章</a></p><p>执行命令之前记得把要删除的文件给备份一下，因为执行命令后相应文件也会被删除，提交记录也被删除，找都没地方找。。。</p><p>进入项目目录执行</p><pre><code>git filter-branch --force --index-filter \&quot;git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA&quot; \--prune-empty --tag-name-filter cat -- --all</code></pre><p>PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA 填入要删除文件的位置，如 src/config/index.js<br>删除完成后提交到远端</p><pre><code>git push origin --force --all</code></pre>]]></content>
      
      
      <categories>
          
          <category> 踩坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次vue项目ie兼容性问题</title>
      <link href="/2020/11/09/ji-yi-ci-vue-xiang-mu-ie-jian-rong-xing-wen-ti/"/>
      <url>/2020/11/09/ji-yi-ci-vue-xiang-mu-ie-jian-rong-xing-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>项目是使用公司自己的脚手架搭建的，其中引入了基于element-ui修改的ui框架。在ie中白屏显示，并且报错。</p><pre><code>SCRIPT1028: SCRIPT1028: Expected identifier, string or number</code></pre><p>查看公司文档后发现需要在vue.config.js中添加<code>transpileDependencies</code>参数配置</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  transpileDependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@pillarjs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>因为babel默认只转义src中的文件，加上<code>transpileDependencies</code>后，可以为<code>node_modules</code>中的依赖开启转换。</p><p>本以为这就完事了，结果发现不仅ie没起作用，就连chrome都报错了。。。</p><p>chrome报错:</p><pre><code>Uncaught TypeError: Cannot assign to read only property &#39;exports&#39; of object &#39;#&lt;Object&gt;&#39;</code></pre><p>ie报错:</p><pre><code>Assignment to read-only properties is not allowed in strict mode</code></pre><p>原因是import和module.exports混用了,所以webpack报错了。</p><p>查了半天网上的解决办法都没用，直到看到<a href="https://blog.csdn.net/qq_41619796/article/details/108076869" target="_blank" rel="noopener">这篇文章</a>。</p><p>在babel.config.js里面加unambiguous属性</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'@vue/app'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  sourceType<span class="token punctuation">:</span> <span class="token string">'unambiguous'</span><span class="token punctuation">}</span></code></pre><p>让babel和webpack一样严格区分commonJS文件和ES6文件。</p><p>改完之后chrome正常了，edge浏览器也能看了但是ie还是不行。报错<code>SCRIPT1002: 语法错误 chunk-vendors.js (9461,3)</code>,没办法只能点进去看到底是什么问题。</p><p>后来发现是element-ui和vue-particles的问题，于是在<code>transpileDependencies</code>中又添加了这两个依赖。</p><p>重启项目，ok了。但是很奇怪啊，为什么element-ui也需要加进去，别的使用element-ui的项目也没加，ie就可以看啊？难道是因为@pillarjs这个依赖使用了element-ui的原因？</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 浏览器兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker使用阿里云镜像加速</title>
      <link href="/2020/06/02/docker-shi-yong-a-li-yun-jing-xiang-jia-su/"/>
      <url>/2020/06/02/docker-shi-yong-a-li-yun-jing-xiang-jia-su/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/docker/daemon.json<span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>进入阿里云容器镜像服务中，在镜像中心的镜像加速器下有一个加速地址，填入即可</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓内嵌webview页面不显示图片</title>
      <link href="/2020/05/24/an-zhuo-nei-qian-webview-ye-mian-bu-xian-shi-tu-pian/"/>
      <url>/2020/05/24/an-zhuo-nei-qian-webview-ye-mian-bu-xian-shi-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>今天遇见了一个奇怪的bug，一个上传图片功能使用vant的uploader组件，在pc模拟器试的好好的，但是内嵌到安卓webview页面之后就显示不出来图片了，ios却正常。使用vconsole调试也看不出任何报错，图片上传接口也都正常。一开始以为是vant的这个组件有问题，不兼容安卓，网上查了一圈说是把input中的accept属性给去掉，结果去掉后还是显示不出来。这时测试说生产环境没问题，只有开发和测试环境会这样，我才恍然大悟，会不会是图片地址的问题。生产环境上传图片后的地址都是https的而开发和测试环境的图片地址是http的，安卓是不是有某种机制，不允许https当中加载http资源。一查果然是这样,android webview 从Lollipop(5.0)开始webview默认不允许混合模式，https当中不能加载http资源。解决办法是:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//解决图片加载不出来问题</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">></span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mBridgeWebView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMixedContentMode</span><span class="token punctuation">(</span>WebSettings<span class="token punctuation">.</span>MIXED_CONTENT_ALWAYS_ALLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mBridgeWebView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBlockNetworkImage</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>刚好前阵子遇到了网站配置完ssl证书后https加载http资源的问题，所以很快就想到了这块，不然还会傻不拉几的去查是不是vant的问题，哈哈。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 踩坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs设置跨域访问</title>
      <link href="/2020/04/20/nodejs-she-zhi-kua-yu-fang-wen/"/>
      <url>/2020/04/20/nodejs-she-zhi-kua-yu-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>设置nodejs允许跨域访问<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　<span class="token comment" spellcheck="true">//设置允许跨域的域名，*代表允许任意域名跨域</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token comment" spellcheck="true">//允许的header类型</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Content-type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token comment" spellcheck="true">//跨域允许的请求方式</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"PUT,POST,GET,DELETE,OPTIONS,PATCH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token comment" spellcheck="true">//可选，用来指定本次预检请求的有效期，单位为秒。在此期间，不用发出另一条预检请求。</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Max-Age'</span><span class="token punctuation">,</span><span class="token number">1728000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//预请求缓存20天</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 踩坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器安全组CIDR配置</title>
      <link href="/2020/04/18/yun-fu-wu-qi-an-quan-zu-cidr-pei-zhi/"/>
      <url>/2020/04/18/yun-fu-wu-qi-an-quan-zu-cidr-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>首先把 IP 地址转成 8 位二进制，（ 192.168.1.6 就变成了 11000000.10101000.00000001.00000110 ）。<br>然后 /8 就表示匹配前面 8 位和这个一样，后面 24 位任意的 IP 。<br>/16 就表示匹配前面 16 位和这个一样，后面 16 位任意的 IP 。<br>/24 就表示匹配前面 24 位和这个一样，后面 8 位任意的 IP 。<br>/32 就表示匹配所有 32 位和这个都一样的 IP，也就是仅匹配这一个 IP 。<br>/0 就表示匹配所有 32 位都任意的 IP，也就是匹配任意 IP 地址。<br>/ 后面跟任意 [0, 32] 之间的数，表示匹配前面 n 位一样，后面的 32 - n 位任意的 IP 。<br>实际写的时候，通常把后面 32 - n 位归零，然后再转回十进制。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决https网站加载http资源显示不安全</title>
      <link href="/2020/04/11/jie-jue-https-wang-zhan-jia-zai-http-zi-yuan-xian-shi-bu-an-quan/"/>
      <url>/2020/04/11/jie-jue-https-wang-zhan-jia-zai-http-zi-yuan-xian-shi-bu-an-quan/</url>
      
        <content type="html"><![CDATA[<p>今天给网站配了ssl证书，按理说网址边上应该会显示一把小锁，但是还是显示的不安全，原来是页面中有一些资源地址是http的，解决方法:<br>在html中head标签中添加</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upgrade-insecure-requests<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 踩坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux虚拟机安装</title>
      <link href="/2020/03/26/linux-xu-ni-ji-an-zhuang/"/>
      <url>/2020/03/26/linux-xu-ni-ji-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>1.win10中自带了hyper-v虚拟机软件，选中hyper-v后重启电脑<br><img src="/.io//1.png" alt="1"><br>2.可以在开始菜单中找到hyper-v管理器，</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux，虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node中的require是如何加载模块的</title>
      <link href="/2019/11/28/node-zhong-de-require-shi-ru-he-jia-zai-mo-kuai-de/"/>
      <url>/2019/11/28/node-zhong-de-require-shi-ru-he-jia-zai-mo-kuai-de/</url>
      
        <content type="html"><![CDATA[<p>在使用node引入模块的时候，我发现node自带的模块或是npm安装的第三方模块，只需要require个名字就可以加载到了,像是</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></code></pre><p>但是自己写的模块就必须要加上路径,比如</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这样就不行,</span></code></pre><p>为什么第三方模块就不需要加路径呢？<code>express</code>的路径明明是<code>node_modules/express/index.js</code></p><a id="more"></a><p>那是不是我把自己写的模块放到node_modules目录下就不需要写路径了呢，于是我在node_modules目录下创建了<br><img src="https://img2018.cnblogs.com/blog/1570236/201911/1570236-20191128172626172-261225407.png" alt=""><br>然后直接<code>require(&#39;a&#39;)</code>,果然不报错了。</p><p>这其中必有蹊跷啊，查了一圈，终于弄明白了require的加载规则</p><h4 id="node自带的核心模块"><a href="#node自带的核心模块" class="headerlink" title="node自带的核心模块"></a>node自带的核心模块</h4><p>核心模块的本质也是文件，但是我们看不到，因为他们已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了。</p><h4 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h4><p>需要以路径形式引用，如果不写路径，会被认为是核心模块或是第三方模块，</p><p><code>require(&#39;a&#39;)</code>就会去找这个名字的核心模块和第三方模块，找不到就报错了。</p><h4 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h4><p>以express为例</p><p>node在require时会先判断你是不是核心模块，或者是不是路径形式的模块，如果都不是</p><p>就会先找到当前文件所处目录中的<code>node_modules</code> 目录,然后一级一级向下找</p><pre class=" language-javascript"><code class="language-javascript">node_modules<span class="token operator">/</span>expressnode_modules<span class="token operator">/</span>express<span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span>json node_modules<span class="token operator">/</span>express<span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span>json 中的 main 属性</code></pre><p>这个main属性中就记录了<code>express</code>的入口模块</p><p>然后加载使用这个第三方包</p><p>如果<code>package.json</code>文件不存在或者 <code>main</code>指定的入口模块也没有</p><p>则node会自动找该目录下的<code>index.js</code></p><p>也就是说 <code>index.js</code> 会作为一个默认备选项    </p><p>如果以上所有任何一个条件都不成立，则会进入上一级目录中的<code>node_modules</code>目录查找</p><p>如果上一级还没有，则继续往上上一级查找</p><p>如果直到当前磁盘根目录还找不到，最后报错：<code>can not find module xxx</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习</title>
      <link href="/2019/07/24/webpack-xue-xi/"/>
      <url>/2019/07/24/webpack-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack五大核心概念"><a href="#webpack五大核心概念" class="headerlink" title="webpack五大核心概念"></a>webpack五大核心概念</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">'./path/to/my/enter/file.js'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*告知webpack从哪个文件开始去阅读去查验代码*/</span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">'./path/to/my/enter/file.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'my-first-webpack.bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*output是webpack给出的结果打包出的路径是什么，名字是什么…*/</span></code></pre><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'my-first-webpack.bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>      rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.txt$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'raw-loader'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*raw-loader去处理txt文件*/</span></code></pre><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//npm安装</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>      rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.txt$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'raw-loader'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//loader 处理webpack本身不能处理的文件，即非js文件</span><span class="token comment" spellcheck="true">//plugins 能处理更复杂的任务</span></code></pre><h3 id="模式-兼容性"><a href="#模式-兼容性" class="headerlink" title="模式/兼容性"></a>模式/兼容性</h3><p>webpack支持所有符合ES5标准的浏览器（不支持IE8及以下的版本）。webpack的import()和require.ensure()需要promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要提前加载polyfill。</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save babel<span class="token operator">-</span>polyfill</code></pre><h3 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'babel-polyfill'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'webpack'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wepacck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的$nextTick使用</title>
      <link href="/2019/02/23/vue-zhong-de-nexttick-shi-yong/"/>
      <url>/2019/02/23/vue-zhong-de-nexttick-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p><h4 id="什么情况使用"><a href="#什么情况使用" class="headerlink" title="什么情况使用"></a>什么情况使用</h4><p>1.Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载已完成。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//不使用this.$nextTick()方法会报错</span>        that<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>aa<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"created中更改了按钮内容"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//写入到DOM元素</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>2、当项目中你想在改变DOM元素的数据后基于新的dom做点什么，对新DOM一系列的js操作都需要放进Vue.nextTick()的回调函数中；通俗的理解是：更改数据后当你想立即使用js操作新的视图的时候需要使用它</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h3 id<span class="token operator">=</span><span class="token string">"h"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>testMsg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      testMsg<span class="token punctuation">:</span><span class="token string">"原始值"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    changeTxt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>      that<span class="token punctuation">.</span>testMsg<span class="token operator">=</span><span class="token string">"修改后的文本值"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//vue数据改变，改变dom结构</span>      <span class="token keyword">let</span> domTxt<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//后续js对dom的操作</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domTxt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出可以看到vue数据修改后DOM并没有立即更新，后续的dom都不是最新的</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>domTxt<span class="token operator">===</span><span class="token string">"原始值"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文本data被修改后dom内容没立即更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文本data被修改后dom内容被马上更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>正确的用法是：vue改变dom元素结构后使用vue.$nextTick()方法来实现dom数据更新后延迟执行后续代码</p><pre class=" language-javascript"><code class="language-javascript">changeTxt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>      that<span class="token punctuation">.</span>testMsg<span class="token operator">=</span><span class="token string">"修改后的文本值"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//修改dom结构</span>      that<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//使用vue.$nextTick()方法可以dom数据更新后延迟执行</span>        <span class="token keyword">let</span> domTxt<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domTxt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出可以看到vue数据修改后并没有DOM没有立即更新，</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>domTxt<span class="token operator">===</span><span class="token string">"原始值"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文本data被修改后dom内容没立即更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文本data被修改后dom内容被马上更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computed,methods,watch区别</title>
      <link href="/2019/01/15/computed-methods-watch-qu-bie/"/>
      <url>/2019/01/15/computed-methods-watch-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h2 id="渲染顺序"><a href="#渲染顺序" class="headerlink" title="渲染顺序"></a>渲染顺序</h2><p>默认加载的时候先computed再watch，不执行methods；等触发某一事件后，则是：先methods再watch。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置文本超出特定行数显示省略号</title>
      <link href="/2018/12/25/css-ellipsis/"/>
      <url>/2018/12/25/css-ellipsis/</url>
      
        <content type="html"><![CDATA[<p>注意，不支持ie</p><pre class=" language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 行数<span class="token punctuation">;</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next主题自定义样式</title>
      <link href="/2018/12/15/hexo-next-zhu-ti-pei-zhi/"/>
      <url>/2018/12/15/hexo-next-zhu-ti-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>网上相关教程实在太多，找起来眼花缭乱，记录下我自己是如何修改的。<br><a id="more"></a></p><hr><h2 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h2><p><a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">这里</a>是彩带样式，<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>是小猫样式，选择好样式后把代码复制到<code>themes/next/layout/_layout.swig</code>中，放到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>后面，把<code>herf</code>改成自己的github地址。</p><h2 id="更改文章内的链接样式"><a href="#更改文章内的链接样式" class="headerlink" title="更改文章内的链接样式"></a>更改文章内的链接样式</h2><p>在<code>themes\next\source\css\_custom\custom.styl</code>中添加</p><pre class=" language-css"><code class="language-css"><span class="token selector">// 文章内链接文本样式 <span class="token class">.post-body</span> p a</span><span class="token punctuation">{</span>     <span class="token selector">color: <span class="token id">#0593d3</span>;     border-bottom: none;     border-bottom: 1px solid <span class="token id">#0593d3</span>;     &amp;<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>         <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fc6423</span><span class="token punctuation">;</span>         <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>         <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fc6423</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>可以把所有的自定义样式都放到<code>themes/next/source/css/_custom/custom.styl</code>里，不会影响到其他样式，不用的话删掉就行。</p><h2 id="主页文章添加阴影"><a href="#主页文章添加阴影" class="headerlink" title="主页文章添加阴影"></a>主页文章添加阴影</h2><p>在<code>themes/next/source/css/_custom/custom.styl</code>中添加</p><pre class=" language-css"><code class="language-css"><span class="token selector">// 主页文章添加阴影效果<span class="token class">.post</span> </span><span class="token punctuation">{</span>   <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>   <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>   <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">20</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">202</span>, <span class="token number">203</span>, <span class="token number">203</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">20</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">202</span>, <span class="token number">203</span>, <span class="token number">204</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">}</span></code></pre><h2 id="替换标签的"><a href="#替换标签的" class="headerlink" title="替换标签的#"></a>替换标签的<code>#</code></h2><p>在<code>themes/next/layout/_macro/post.swig</code>中搜索<code>rel=&quot;tag&quot;&gt;#</code>将<code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h2 id="删除页面底部的由hexo驱动"><a href="#删除页面底部的由hexo驱动" class="headerlink" title="删除页面底部的由hexo驱动"></a>删除页面底部的由hexo驱动</h2><p>打开<code>themes/next/layout/_partials/footer.swig</code>，将<code>class=&quot;powered-by&quot;</code>,<code>class=&quot;theme-info&quot;</code>的div删除或注释，<code>&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</code>是中间的竖线，也可以删除或注释。</p><p>后来发现直接在主题配置文件中就有footer的配置项，把true都改成false就可以</p><pre class=" language-json"><code class="language-json">footer<span class="token operator">:</span>  # Specify the date when the site was setup.  # If not defined<span class="token punctuation">,</span> current year will be used.  #since<span class="token operator">:</span> <span class="token number">2015</span>  # Icon between year and copyright info.  icon<span class="token operator">:</span> heart  # If not defined<span class="token punctuation">,</span> will be used `author` from Hexo main config.  copyright<span class="token operator">:</span>  # -------------------------------------------------------------  # Hexo link (Powered by Hexo<span class="token punctuation">)</span>.  powered<span class="token operator">:</span> <span class="token boolean">false</span>  theme<span class="token operator">:</span>    # Theme &amp; scheme info link (Theme - NexT.scheme<span class="token punctuation">)</span>.    enable<span class="token operator">:</span> <span class="token boolean">false</span>    # Version info of NexT after scheme info (vX.X.X<span class="token punctuation">)</span>.    version<span class="token operator">:</span> <span class="token boolean">false</span></code></pre><h2 id="底部添加跳动的桃心"><a href="#底部添加跳动的桃心" class="headerlink" title="底部添加跳动的桃心"></a>底部添加跳动的桃心</h2><p>把上面那段代码中的icon改成heart，在<code>themes\next\source\css\_custom\custom.styl</code>中添加</p><pre class=" language-css"><code class="language-css">//底部爱心小图标跳动<span class="token atrule"><span class="token rule">@keyframes</span> heartAnimate</span> <span class="token punctuation">{</span>    <span class="token selector">0%,100%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector">10%,30%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector">20%,40%,60%,80%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector">50%,70%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">//图标所对应的span中的ID<span class="token id">#custom-heart</span> </span><span class="token punctuation">{</span>    <span class="token property">animation</span><span class="token punctuation">:</span> heartAnimate <span class="token number">1.33</span>s ease-in-out infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.with-love</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">113</span>, <span class="token number">113</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>themes/next/layout/css/_particals/footer.swig</code>中搜索<code>with-love</code>,给这个span标签加上之前自定义的id</p><h2 id="底部添加访问量"><a href="#底部添加访问量" class="headerlink" title="底部添加访问量"></a>底部添加访问量</h2><p>主题配置文件中自带有不蒜子计数，搜索<code>busuanzi_count</code>,看着配置就可以uv是访问人数，pv是访问量</p><pre class=" language-javascript"><code class="language-javascript">busuanzi_count<span class="token punctuation">:</span>  # count values only <span class="token keyword">if</span> the other configs are <span class="token boolean">false</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  # custom uv span <span class="token keyword">for</span> the whole site  site_uv<span class="token punctuation">:</span> <span class="token boolean">true</span>  site_uv_header<span class="token punctuation">:</span> <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-user"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>访问人数  site_uv_footer<span class="token punctuation">:</span> 人  # custom pv span <span class="token keyword">for</span> the whole site  site_pv<span class="token punctuation">:</span> <span class="token boolean">true</span>  site_pv_header<span class="token punctuation">:</span> <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-eye"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>总访问量  site_pv_footer<span class="token punctuation">:</span> 次  # custom pv span <span class="token keyword">for</span> one page only  page_pv<span class="token punctuation">:</span> <span class="token boolean">true</span>  page_pv_header<span class="token punctuation">:</span> <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-file-o"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>  page_pv_footer<span class="token punctuation">:</span> times<span class="token punctuation">.</span></code></pre><h2 id="页面点击出现桃心"><a href="#页面点击出现桃心" class="headerlink" title="页面点击出现桃心"></a>页面点击出现桃心</h2><p>在<code>themes/next/source/js/src</code>下新建文件<code>clicklove.js</code>，复制下面代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token string">".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span>d<span class="token punctuation">.</span>length<span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">--</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">004</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">-</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">013</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText<span class="token operator">=</span><span class="token string">"left:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">"px;top:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token string">"px;opacity:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">+</span><span class="token string">";transform:scale("</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token string">") rotate(45deg);background:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>color<span class="token operator">+</span><span class="token string">";z-index:99999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>onclick<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>e<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">&amp;&amp;</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">i</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">"heart"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span>a<span class="token punctuation">,</span>x<span class="token punctuation">:</span>e<span class="token punctuation">.</span>clientX<span class="token number">-5</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span>e<span class="token punctuation">.</span>clientY<span class="token number">-5</span><span class="token punctuation">,</span>scale<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>alpha<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText<span class="token operator">=</span>e<span class="token punctuation">}</span>t<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"rgb("</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">}</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span>requestAnimationFrame<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>requestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>webkitRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>mozRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>oRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>msRequestAnimationFrame<span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">1e3</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>，然后在<code>themes/next/layout/_layout.swig</code>文件末尾添加<code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</code></p><h2 id="网页title添加搞怪崩溃效果"><a href="#网页title添加搞怪崩溃效果" class="headerlink" title="网页title添加搞怪崩溃效果"></a>网页title添加搞怪崩溃效果</h2><p>在<code>next/source/js/src</code>文件夹下创建<code>crash_cheat.js</code>，添加代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>崩溃欺骗<span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">var</span> OriginTitle <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">;</span> <span class="token keyword">var</span> titleTime<span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"/img/TEP.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'╭(°A°`)╮ 页面崩溃啦 ~'</span><span class="token punctuation">;</span>         <span class="token function">clearTimeout</span><span class="token punctuation">(</span>titleTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"/favicon.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'(ฅ>ω&lt;*ฅ) 噫又好了~'</span> <span class="token operator">+</span> OriginTitle<span class="token punctuation">;</span>         titleTime <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitle<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后在<code>next/layout/_layout.swig</code>文件中，添加引用（注：在swig末尾添加）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>崩溃欺骗<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/src/crash_cheat.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>next评论系统有很多,我选择了valine,需要先在<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>注册一个账号，之后得到appid和appkey，在主题配置文件中直接就可以设置</p><pre class=" language-javascript"><code class="language-javascript">valine<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  appid<span class="token punctuation">:</span> 填入appid  appkey<span class="token punctuation">:</span> 填入appkey  notify<span class="token punctuation">:</span> <span class="token boolean">false</span> # mail notifier <span class="token punctuation">,</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>xCss<span class="token operator">/</span>Valine<span class="token operator">/</span>wiki  verify<span class="token punctuation">:</span> <span class="token boolean">false</span> # Verification code  placeholder<span class="token punctuation">:</span> Just go go # comment box placeholder  avatar<span class="token punctuation">:</span> mm # gravatar style  guest_info<span class="token punctuation">:</span> nick<span class="token punctuation">,</span>mail # custom comment header  pageSize<span class="token punctuation">:</span> <span class="token number">10</span> # pagination size</code></pre>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
